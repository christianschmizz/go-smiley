// Code generated by "stringer -type=CommandCode"; DO NOT EDIT.

package ssp

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ResetFixedEncryptionKey-97]
	_ = x[SetFixedEncryptionKey-96]
	_ = x[EnablePayoutDevice-92]
	_ = x[DisablePayoutDevice-91]
	_ = x[CoinMechOptions-90]
	_ = x[ResetCounters-89]
	_ = x[GetCounters-88]
	_ = x[EventACK-87]
	_ = x[PollWithACK-86]
	_ = x[ConfigureBezel-84]
	_ = x[CashboxPayoutOperationData-83]
	_ = x[SmartEmpty-82]
	_ = x[GetHopperOptions-81]
	_ = x[SetHopperOptions-80]
	_ = x[GetBuildRevision-79]
	_ = x[SetBaudRate-77]
	_ = x[RequestKeyExchange-76]
	_ = x[SetModulus-75]
	_ = x[SetGenerator-74]
	_ = x[SetCoinMechGlobalInhibit-73]
	_ = x[PayoutByDenomination-70]
	_ = x[SetValueReportingType-69]
	_ = x[FloatByDenomination-68]
	_ = x[StackNote-67]
	_ = x[PayoutNote-66]
	_ = x[GetNotePositions-65]
	_ = x[SetCoinMechInhibits-64]
	_ = x[EmptyAll-63]
	_ = x[GetMinimumPayout-62]
	_ = x[FloatAmount-61]
	_ = x[GetDenominationRoute-60]
	_ = x[SetDenominationRoute-59]
	_ = x[HaltPayout-56]
	_ = x[CommunicationPassThrough-55]
	_ = x[GetDenominationLevel-53]
	_ = x[SetDenominationLevel-52]
	_ = x[PayoutAmount-51]
	_ = x[SetRefillMode-48]
	_ = x[GetBarCodeData-39]
	_ = x[SetBarCodeInhibitStatus-38]
	_ = x[GetBarCodeInhibitStatus-37]
	_ = x[SetBarCodeConfiguration-36]
	_ = x[GetBarCodeReaderConfiguration-35]
	_ = x[GetAllLevels-34]
	_ = x[GetDatasetVersion-33]
	_ = x[GetFirmwareVersion-32]
	_ = x[Hold-24]
	_ = x[LastRejectedCode-23]
	_ = x[Sync-17]
	_ = x[ChannelReTeachData-16]
	_ = x[ChannelSecurityData-15]
	_ = x[ChannelValueRequest-14]
	_ = x[UnitData-13]
	_ = x[GetSerialNumber-12]
	_ = x[Enable-10]
	_ = x[Disable-9]
	_ = x[RejectBanknote-8]
	_ = x[Poll-7]
	_ = x[HostProtocolVersion-6]
	_ = x[SetupRequest-5]
	_ = x[DisplayOff-4]
	_ = x[DisplayOn-3]
	_ = x[SetChannelInhibits-2]
	_ = x[Reset-1]
}

const _CommandCode_name = "ResetSetChannelInhibitsDisplayOnDisplayOffSetupRequestHostProtocolVersionPollRejectBanknoteDisableEnableGetSerialNumberUnitDataChannelValueRequestChannelSecurityDataChannelReTeachDataSyncLastRejectedCodeHoldGetFirmwareVersionGetDatasetVersionGetAllLevelsGetBarCodeReaderConfigurationSetBarCodeConfigurationGetBarCodeInhibitStatusSetBarCodeInhibitStatusGetBarCodeDataSetRefillModePayoutAmountSetDenominationLevelGetDenominationLevelCommunicationPassThroughHaltPayoutSetDenominationRouteGetDenominationRouteFloatAmountGetMinimumPayoutEmptyAllSetCoinMechInhibitsGetNotePositionsPayoutNoteStackNoteFloatByDenominationSetValueReportingTypePayoutByDenominationSetCoinMechGlobalInhibitSetGeneratorSetModulusRequestKeyExchangeSetBaudRateGetBuildRevisionSetHopperOptionsGetHopperOptionsSmartEmptyCashboxPayoutOperationDataConfigureBezelPollWithACKEventACKGetCountersResetCountersCoinMechOptionsDisablePayoutDeviceEnablePayoutDeviceSetFixedEncryptionKeyResetFixedEncryptionKey"

var _CommandCode_map = map[CommandCode]string{
	1:  _CommandCode_name[0:5],
	2:  _CommandCode_name[5:23],
	3:  _CommandCode_name[23:32],
	4:  _CommandCode_name[32:42],
	5:  _CommandCode_name[42:54],
	6:  _CommandCode_name[54:73],
	7:  _CommandCode_name[73:77],
	8:  _CommandCode_name[77:91],
	9:  _CommandCode_name[91:98],
	10: _CommandCode_name[98:104],
	12: _CommandCode_name[104:119],
	13: _CommandCode_name[119:127],
	14: _CommandCode_name[127:146],
	15: _CommandCode_name[146:165],
	16: _CommandCode_name[165:183],
	17: _CommandCode_name[183:187],
	23: _CommandCode_name[187:203],
	24: _CommandCode_name[203:207],
	32: _CommandCode_name[207:225],
	33: _CommandCode_name[225:242],
	34: _CommandCode_name[242:254],
	35: _CommandCode_name[254:283],
	36: _CommandCode_name[283:306],
	37: _CommandCode_name[306:329],
	38: _CommandCode_name[329:352],
	39: _CommandCode_name[352:366],
	48: _CommandCode_name[366:379],
	51: _CommandCode_name[379:391],
	52: _CommandCode_name[391:411],
	53: _CommandCode_name[411:431],
	55: _CommandCode_name[431:455],
	56: _CommandCode_name[455:465],
	59: _CommandCode_name[465:485],
	60: _CommandCode_name[485:505],
	61: _CommandCode_name[505:516],
	62: _CommandCode_name[516:532],
	63: _CommandCode_name[532:540],
	64: _CommandCode_name[540:559],
	65: _CommandCode_name[559:575],
	66: _CommandCode_name[575:585],
	67: _CommandCode_name[585:594],
	68: _CommandCode_name[594:613],
	69: _CommandCode_name[613:634],
	70: _CommandCode_name[634:654],
	73: _CommandCode_name[654:678],
	74: _CommandCode_name[678:690],
	75: _CommandCode_name[690:700],
	76: _CommandCode_name[700:718],
	77: _CommandCode_name[718:729],
	79: _CommandCode_name[729:745],
	80: _CommandCode_name[745:761],
	81: _CommandCode_name[761:777],
	82: _CommandCode_name[777:787],
	83: _CommandCode_name[787:813],
	84: _CommandCode_name[813:827],
	86: _CommandCode_name[827:838],
	87: _CommandCode_name[838:846],
	88: _CommandCode_name[846:857],
	89: _CommandCode_name[857:870],
	90: _CommandCode_name[870:885],
	91: _CommandCode_name[885:904],
	92: _CommandCode_name[904:922],
	96: _CommandCode_name[922:943],
	97: _CommandCode_name[943:966],
}

func (i CommandCode) String() string {
	if str, ok := _CommandCode_map[i]; ok {
		return str
	}
	return "CommandCode(" + strconv.FormatInt(int64(i), 10) + ")"
}
